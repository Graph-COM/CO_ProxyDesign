

#include <stdio.h>
#include "ap_fixed.h"

void case_4(
    ap_int<16> in_data[25],
    ap_int<16> out_data[23]
)
{

#pragma HLS array_partition variable=in_data complete
#pragma HLS array_partition variable=out_data complete

    

ap_int<10> in1;
in1.range(9, 0) = in_data[0].range(9, 0);
ap_int<9> in2;
in2.range(8, 0) = in_data[1].range(8, 0);
ap_int<14> in3;
in3.range(13, 0) = in_data[2].range(13, 0);
ap_int<12> in4;
in4.range(11, 0) = in_data[3].range(11, 0);
ap_int<4> in5;
in5.range(3, 0) = in_data[4].range(3, 0);
ap_int<13> in6;
in6.range(12, 0) = in_data[5].range(12, 0);
ap_int<12> in7;
in7.range(11, 0) = in_data[6].range(11, 0);
ap_int<4> in8;
in8.range(3, 0) = in_data[7].range(3, 0);
ap_int<8> in9;
in9.range(7, 0) = in_data[8].range(7, 0);
ap_int<6> in10;
in10.range(5, 0) = in_data[9].range(5, 0);
ap_int<14> in11;
in11.range(13, 0) = in_data[10].range(13, 0);
ap_int<8> in12;
in12.range(7, 0) = in_data[11].range(7, 0);
ap_int<4> in13;
in13.range(3, 0) = in_data[12].range(3, 0);
ap_int<10> in14;
in14.range(9, 0) = in_data[13].range(9, 0);
ap_int<16> in15;
in15.range(15, 0) = in_data[14].range(15, 0);
ap_int<14> in16;
in16.range(13, 0) = in_data[15].range(13, 0);
ap_int<2> in17;
in17.range(1, 0) = in_data[16].range(1, 0);
ap_int<10> in18;
in18.range(9, 0) = in_data[17].range(9, 0);
ap_int<5> in19;
in19.range(4, 0) = in_data[18].range(4, 0);
ap_int<10> in20;
in20.range(9, 0) = in_data[19].range(9, 0);
ap_int<14> in21;
in21.range(13, 0) = in_data[20].range(13, 0);
ap_int<9> in22;
in22.range(8, 0) = in_data[21].range(8, 0);
ap_int<9> in23;
in23.range(8, 0) = in_data[22].range(8, 0);
ap_int<3> in24;
in24.range(2, 0) = in_data[23].range(2, 0);
ap_int<4> in25;
in25.range(3, 0) = in_data[24].range(3, 0);

ap_int<14> m26;
ap_int<4> m27;
ap_int<4> m28;
ap_int<16> m29;
ap_int<8> m30;
ap_int<8> m31;
ap_int<3> m32;
ap_int<16> m33;
ap_int<10> m34;
ap_int<11> m35;
ap_int<6> m36;
ap_int<4> m37;
ap_int<13> m38;
ap_int<4> m39;
ap_int<13> m40;
ap_int<10> m41;
ap_int<6> m42;
ap_int<8> m43;
ap_int<16> m44;
ap_int<15> m45;
ap_int<8> m46;
ap_int<15> m47;
ap_int<2> m48;
ap_int<5> m49;
ap_int<8> m50;
ap_int<9> m51;
ap_int<2> m52;
ap_int<7> m53;
ap_int<11> m54;
ap_int<11> m55;
ap_int<6> m56;
ap_int<9> m57;
ap_int<5> m58;
ap_int<4> m59;
ap_int<9> m60;
ap_int<16> m61;
ap_int<5> m62;
ap_int<13> m63;
ap_int<4> m64;
ap_int<9> m65;
ap_int<13> m66;
ap_int<16> m67;
ap_int<4> m68;
ap_int<4> m69;
ap_int<12> m70;
ap_int<11> m71;
ap_int<10> m72;
ap_int<7> m73;
ap_int<6> m74;
ap_int<8> m75;
ap_int<11> m76;
ap_int<15> m77;
ap_int<11> m78;
ap_int<15> m79;
ap_int<15> m80;
ap_int<15> m81;
ap_int<6> m82;
ap_int<15> m83;
ap_int<11> m84;
ap_int<12> m85;
ap_int<11> m86;
ap_int<6> m87;
ap_int<13> m88;
ap_int<14> m89;
ap_int<15> m90;
ap_int<15> m91;
ap_int<5> m92;
ap_int<9> m93;
ap_int<16> m94;
ap_int<16> m95;
ap_int<6> m96;
ap_int<8> m97;
ap_int<9> m98;
ap_int<15> m99;
ap_int<14> m100;
ap_int<10> m101;
ap_int<13> m102;
ap_int<12> m103;
ap_int<8> m104;
ap_int<8> m105;
ap_int<13> m106;
ap_int<10> m107;
ap_int<9> m108;
ap_int<16> m109;
ap_int<14> m110;
ap_int<9> m111;
ap_int<13> m112;
ap_int<10> m113;
ap_int<15> m114;
ap_int<13> m115;
ap_int<14> m116;
ap_int<6> m117;
ap_int<15> m118;
ap_int<13> m119;

m26 = in9 * in15;
m27 = in19 * in17;
m28 = in19 * in11;
m29 = in13 * in6;
m30 = in13 * in20;
m31 = m28 * in6;
m32 = in17 * in10;
m33 = in20 * m31;
m34 = in14 + in12;
m35 = in16 * in11;
m36 = in14 * m29;
m37 = in19 * m32;
m38 = in20 * in16;
m39 = m34 * m32;
m40 = m38 + in20;
m41 = in21 * m26;
m42 = m37 * m26;
m43 = in25 * m31;
m44 = in22 * m40;
m45 = m31 * m44;
m46 = m35 * m38;
m47 = m40 + m44;
m48 = in25 * m36;
m49 = m47 * m43;
m50 = m48 * m42;
m51 = m50 * m40;
m52 = m27 + m36;
m53 = m33 * m35;
m54 = m31 * m38;
m55 = m45 * m37;
m56 = m35 + m45;
m57 = m36 * m46;
m58 = m38 * m39;
m59 = m48 * m39;
m60 = m56 * m36;
m61 = m57 * m45;
m62 = m59 * m50;
m63 = m44 * m54;
m64 = m50 * m48;
m65 = m41 * m55;
m66 = m41 + m45;
m67 = m51 * m54;
m68 = m48 * m61;
m69 = m68 * m59;
m70 = m57 * m68;
m71 = m68 + m60;
m72 = m56 * m64;
m73 = m71 + m63;
m74 = m70 * m49;
m75 = m57 * m58;
m76 = m60 + m54;
m77 = m68 * m61;
m78 = m70 * m71;
m79 = m56 * m61;
m80 = m60 * m65;
m81 = m79 * m72;
m82 = m80 * m68;
m83 = m71 * m65;
m84 = m82 + m73;
m85 = m60 * m73;
m86 = m69 + m75;
m87 = m84 * m77;
m88 = m73 * m63;
m89 = m76 * m83;
m90 = m73 * m78;
m91 = m83 * m75;
m92 = m83 * m87;
m93 = m73 * m79;
m94 = m87 * m84;
m95 = m71 + m79;
m96 = m87 * m71;
m97 = m79 * m83;
m98 = m89 * m88;
m99 = m81 + m77;
m100 = m87 * m81;
m101 = m78 * m95;
m102 = m99 * m87;
m103 = m81 + m86;
m104 = m87 * m82;
m105 = m93 * m102;
m106 = m82 * m81;
m107 = m100 * m97;
m108 = m104 * m84;
m109 = m89 * m95;
m110 = m104 + m109;
m111 = m103 * m94;
m112 = m89 * m94;
m113 = m93 * m99;
m114 = m100 * m112;
m115 = m90 * m90;
m116 = m95 * m110;
m117 = m94 * m105;
m118 = m116 * m93;
m119 = m95 * m112;

out_data[0] = m30;
out_data[1] = m52;
out_data[2] = m53;
out_data[3] = m62;
out_data[4] = m66;
out_data[5] = m67;
out_data[6] = m74;
out_data[7] = m85;
out_data[8] = m91;
out_data[9] = m92;
out_data[10] = m96;
out_data[11] = m98;
out_data[12] = m101;
out_data[13] = m106;
out_data[14] = m107;
out_data[15] = m108;
out_data[16] = m111;
out_data[17] = m113;
out_data[18] = m114;
out_data[19] = m115;
out_data[20] = m117;
out_data[21] = m118;
out_data[22] = m119;


}
    